# Define the environment, gate positions, ... ----------------------
gate_id_to_name_mapping:
  1: small_portal
  0: large_portal

component_geometry:
  large_portal:
    support:
      position: [0, 0, 0.3875]
      size: [0.05, 0.05, 0.755]
      type: collision
      name: support
    bottom_bar:
      position: [0, 0, 0.75]
      size: [0.55, 0.05, 0.05]
      type: collision
      name: bottom_bar
    top_bar:
      position: [0, 0, 1.25]
      size: [0.55, 0.05, 0.05]
      type: collision
      name: top_bar
    left_bar:
      position: [-0.25, 0, 1]
      size: [0.05, 0.05, 0.55]
      type: collision
      name: left_bar
    right_bar:
      position: [0.25, 0, 1]
      size: [0.05, 0.05, 0.55]
      type: collision
      name: right_bar
    filling:
      position: [0, 0, 1.0]
      size: [0.45, 0.00000001, 0.45]
      type: filling
      name: filling
  small_portal:
    support:
      position: [0, 0, 0.15]
      size: [0.05, 0.05, 0.3]
      type: collision
      name: support
    bottom_bar:
      position: [0, 0, 0.275]
      size: [0.55, 0.05, 0.05]
      type: collision
      name: bottom_bar
    top_bar:
      position: [0, 0, 0.775]
      size: [0.55, 0.05, 0.05]
      type: collision
      name: top_bar
    left_bar:
      position: [-0.25, 0, 0.525]
      size: [0.05, 0.05, 0.55]
      type: collision
      name: left_bar
    right_bar:
      position: [0.25, 0, 0.525]
      size: [0.05, 0.05, 0.55]
      type: collision
      name: right_bar
    filling:
      position: [0, 0, 0.525]
      size: [0.45, 0.00000001, 0.45]
      type: filling
      name: filling
  obstacle:
    cylinder:
      position: [0, 0, 0.525]
      size: [0.1, 0.1, 1.05]
      type: collision
      name: obstacle

component_properties:
  large_portal:
    height: 1
  small_portal:
    height: 0.525

# End of the environment definition -------------------------------

general_properties:
  takeoff_time: 0.1
  takeoff_height: 0.1
  multi_episode: false
  learn_from_history: false
  vis_experiment: false
  no_recompute: true


# In the world properties, we define how our reprsentation of the world in code should look like
# The most important proerties are inflation radius. This radius states how much we inflate the volume around collision objects
# This value should at lease be as large as the radius of the drone but making it lager will make out drone more robust
world_properties:
  inflate_radius:
    gate: 0.15
    obstacle: 0.15
  lower_bound: [-3, -3, 0]
  upper_bound: [3, 3, 1.5]

# Properties definining how our C++ path planner works
path_planner_properties:
  time_limit_online: 0.5 # time we give the planner to recompute a path during flight
  time_limit_offline: 1.5 # Time we give the planner to compute a path before flight
  optimality_threshold_percentage: 0.05 # value for ompl, we preemtively stop planning if path diverges from straight line path by less than 5%
  checkpoint_gate_offset: 0.15 # we place additional checkpoints before and after each gate, this gives the distance
  range: 0.7 # max length of straight line distance used in RRT* algorithm
  min_dist_check_traj_collision: 0.1 # this is a custom inflation radius we use to check a trajectory for collision once we have new gate informatio, one strategy is to make this a bit smaller than the original ones
  path_simplification: ompl # simplification method ompl works the best other values are none, and custom
  recalculate_online: False # For sim purpose whether we block the main thread during recomputation
  advance_for_calculation: False # For sim purpose, whether we advance trajectory for traj calculation time
  can_pass_gate: true # whether our trajectory can pass gates, i.e. fly through a gates and back through it
  planner: "fmt" # Type of planner to use
  samples_fmt: 10000 # Number of samples for FMT* planner

trajectory_generator_properties:
  type: optimal # optimal works best, other values are snap (minimum snap trajectory), spline
  max_time: 12 # only important for spline. In spline we assume same distance passed in same times, this is the time for the trajectory and timestamps are derived accordingly
  max_velocity: 2.3 # max velocity in each axis of the drone
  max_acceleration: 1.6 # max acceleration in each axis of the drone
  sampling_interval: 0.05 # How granular the trajectory is sampled

  max_traj_divergence: 0.001 # How much the trajectory is maximum allowed to diverge from the planned path (only relevant for optimal time parametization)
  prepend_traj_time: 3 # In optimal planning, we prepend trajectory with part of previous one to guarantee smooth velocities, this value defines the number of seconds to prepend

additional_statics_obstacles: [] # For constraining the solution space additional obstacles can be provided as a list
